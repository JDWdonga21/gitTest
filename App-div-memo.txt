console.div
console.log

※ 코코아톡 강좌
input 테그가 제공하는 'required', 'maxlength="15" 는 input 테그가 form 테그 안에 있어야 함

JavaScript에서 구현하는 대신 할 수 있다면 HTML의 기본 속성을 최대한 이용하기

<1.js를 쓰는것도 낫벳 but
HTML에 이미 구현된 기능(인풋의 유효성검사)이 있으니 그걸 쓰자
근데 HTML에서 input의 유효성검사를 하기위해서는, 인풋이 form 태그 안에 들어가있어야 함
>따라서 div를 form으로 수정

2.근데 form 태그 안에 들어있는 button을 누르거나, type이 submit인 input을 클릭하면,(+폼안에 들어가 있는 인풋에서 엔터를 누르면?) 내가 작성한 form이 submit됨.
*이건 HTML/CSS 강의를 한번들어보고 확인해봐야할듯!!(form이 submit된다는게 무슨말????form부분만 바뀐다는건지?..)
>암튼 문제는 form이 submit되면서 내용이 날라가서 user정보를 저장할 수가 없게 됨!

3.따라서 form이 submit되어서 새로고침 되는것을 막아줄 것임!>

<
function onLoginSubmit(event){
event.preventDefault(); // 브라우저가 기본 동작을 실행하지 못하게 막기 // event object는 preventDefault함수를 기본적으로 갖고 있음
console.log(event);
}

loginForm.addEventListener("submit", onLoginSubmit); // submit 이벤트가 발생한다면, onLoginSubmit함수를 실행시킨다는 의미 // JS는 onLoginSubmit함수 호출시 인자를 담아서 호출함. 해당 인자는 event object를 담은 정보들

★ 중요 ★
form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 되어있다. << 우리가 원하는 것이 아님!
preventDefault() 함수를 추가함으로써 브라우저의 기본 동작을 막을 수 있다!!

이 preventDefault 함수는 EventListener 함수의 '첫 번째 argument' 안에 있는 함수이다. 첫 arument는 지금 막 벌어진 event들에 대한 정보를 갖고 있다.
JS는(기본적으로)argument를 담아서 함수를 호출하는데, 이 argument가 기본 정보들을 제공하고 있다. ex) 누가 submit주체인지, 몇 시에 submit을 했는지 등등 콘솔에 출력해보면 알 수 있음
>
<
브라우저는 브라우저 내에서 event로부터 정보를 잡아내서 정보를 가진채 function 실행버튼을 누르는거다.
preventDefault = 어떤 event 의 기본 행동이 발생되지 않도록 막는 것.
누군가 form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 되어 있다.
그래서 preventDefault function을 추가해서 그 기본 동작을 막고 있는거다.

eventListener에 어떤 function을 추가하던 JS에서는 공짜로 첫번째 argument로 발생된 event에 대한 정보를 줄거다.
필요없으면 그냥 빈칸으로 둬도 된다. 빈칸으로 두면 어떤 정보도 받지 않겠다는 뜻이다.
하지만 ()여기서 뭐라도 쓰면 JS에서 event를 채워줄거다!


addEventListener의 첫 번째 인자는 이벤트이고 이벤트와 관련된 함수에서 그 이벤트에 대한 정보를 함수의 첫 번째 인자에 저장해둔다. 그 정보 안에는 preventDefault라는 메소드가 있는데 이것은 브라우저가 submit 했을 때 새로고침이 안 되게 막는 역할 등을 한다.

addEventListener 안에 있는 함수는 직접 실행하지 않는다
브라우저가 실행시켜주고
브라우저에서 해당 이벤트에 대한 정보 즉, object를 가지게 된다.
addEventListener의 함수에서 object에 대한 자리만 할당해주면
해당 이벤트가 발생시킨 정보들에 대한 object들을 볼 수 있다!
이때 해당 이벤트가 가진 기본 Default값을 발생시키지 않기 하게 위해선 preventDefault를 이용하여 막을 수 있다!

addeventlister에 function을 주게되면, event가 일어났을때, 그 function을 JS가 실행시킴
>이때 js는 addeventlistener에 따라 단순히 function을 실행시키는 것에 더하여 그 function의 첫번째 인자로 직전에 발생된 event에 대한 정보를 object형태로 넣어줌
>또한 이과정을 통해서 발생한 첫번째 인자는 객체이고, 그 객체값중 하나로 preventDefault() 함수가 있음
>이 preventDefault()함수는 자동실행이 되는 것을 막아주므로,
>event.preventDefault()같은 식으로 코드를 작성하면, 자동실행을 막아줌
>
<
만약 addeventlistener에 사용된 함수도 argument를 받아서 사용하는 경우, 
방금 강의에서 선생님꼐서 하신것처럼 event의 정보를 담기 위한 첫번째 argument를 위한 공간을 만들어둔 후, 
두번째 argument를 활용하여 인자를 받아야 되는 건가요?

btn.addEventListener("click, (event) => fn(1,2,3))
>

<
1. string으로만 이루어진 중요하지 않은 변수는 전부 대문자로 작성
2. "Hello" + username; === `Hello ${username}`;
3. 여기서 중요한건 2번째 방법은 따옴표가 아닌 `안에 넣어 주여야함
>

<
1. localStorage 브라우저에 무언가를 저장한 후 나중에 가져 올 수 있음.
ex)lcoalStorage.setItem("username", "nico");
lcoalStorage.getItem("username")
lcoalStorage.removeItem("username")
>

<
const username=loginInput.value;
라는 문장은 인풋값에 대한 변수를 저장하는것 같은데 굳이 onLoginSubmit 라는 function 안에서 정의 하는지 이해가 안가요 nico~~~

그리고 그변수를 함수밖에서 정의할경우에 에러가 생기더라고요


이벤트 리스너 처리때문에 그래요. 저희가 최종으로 목표하는 것은 인풋에 텍스트를 입력하고 submit 버튼을 클릭했을 때 그에 대한 값이 local storage에 저장되어 그것을 보는 것인데, 만약 loginInput.value를 onLoginSubmit 함수 내부가 아닌 외부에서 선언하면 local storage에 저장을 못해요.

말씀하신대로 생각해보면 함수 외부에서 즉 전역변수로 username 변수를 선언하면 단순히 선언한 것 그것 뿐입니다.
submit 버튼을 클릭해야 내용이 전달되어 저장될 수 있는데 그냥 말 그대로 선언한 것 그뿐 그 이상도 이하도 아니에요.

username을 함수 밖에 선언하게 되면 submit 하기 전에 input에 있는 value가 username에 저장되게 됩니다.
현재 input의 value는 아무 값도 없기 때문에 username에는 빈 값이 저장되죠.
따라서 submit 할 때 username에 loginInput.value를 저장해줘야 우리가 입력한 값이 저장되게 됩니다!

그러네요 const는 다른 변수값을 할당 못받으니.
onLoginSubmit 안의 함수가 아니라 전역 변수 submit하기 전에 선언을 해버리면 input의 value 값이 '' 으로 저장이 되버리네요 당연하게 생각 했던것을 다시 말로 풀어 사용할려니 순간 뇌정지가 왔습니다 감사합니다.


>

<
css selector combination 에 이런 규칙이 있습니다.
- 후손 셀렉터(Descendent Selector) : '스페이스'로 연결
- 자식 셀렉터(Child Selector) : ' >' 로 연결

const clock = document.querySelector("h2#clock");
const clock = document.querySelector("#clock");
const clock = document.getElementById("clock");
모두 같다.

setInterval(sayHello, 1000);
sayHello() 라는 펑션을 1초마다 반복한다는 의미.
단 바로 실행되지 않고 1초 후 첫 시작이 되고 계속 1초마다 반복된다.

setTimeout(sayHello, 1000);
1초 기다렸다가 한번만 실행.

date.getHours()
date.getMinutes()
date.getSeconds()
하면 시간, 분, 초를 알 수 있음.
>
<

padStart() : string에 쓸 수 있음
"1".padStart(2, "0") // 마치 삼항 연산자처럼
숫자 앞에 추가 됨
padEnd는 숫자 뒤에 추가됨
const seconds = String(date.getSeconds()).padStart(2, "0");

>

<
Chapter5
1. setInterval(sayHello, 5000); 는 매초, 매분마다 반복되는 일을 해야할때
실행하는 함수임. 첫번째 인수에는 함수이름을 적도 두번째인수는 시간을 적어야함.
1초는 1000임

2. setTimeout(sayHello,1000);는 함수를 바로 실행하고 싶지않을때
사용하는 함수임 예시와같은 setTimeout은 1초 뒤에 sayHello를 실행시킨다는 의미임.

*1. != 2. 비슷하게 생겼지만 전혀다름.

3. getHourse().padStart(2,"0") 는 getHourse로 시간을 받아오고
1시일 경우 01이 아닌 1로 나타난다 그래서 01로 나오게 하기위해 사용하는 함수임.
padStart(2,"0") 2는 두글자가 되지않으면 0을 앞에 추가한다 라는 의미임.
뒤에 추가하고싶으면 padEnd를 사용하면됨.
>

<

https://api.quotable.io/random
api를 이용해서 fetch 함수로 명언을 가져오는것도 좋을 것 같군요!

Math.floor는 소수점을 버리는 것(버림),
Math.ceil은 소수점을 올리는 것(올림),
Math.round는 소수점을 반올림 하는 것입니다.

1. Math.floor() : 내림
2. Math.ceil() : 올림
3. Math.round() : 반올림
4. Math.random() : 0과 1사이의 무작위의 값을 반환

Math module은 JS에서 이미 load돼서 공짜로 제공되고 있다.
ex) Math.PI
Math.random()은 0부터 1 사이의 랜덤한 숫자를 제공한다.
응용도 가능!! Math.random() * 10
Math.round(1.3) => 1
Math.round(6.7) => 7
반올림

Math.ceil(6.7) = >7
Math.ceil(1.1) = >2
숫자를 천장(ceil)까지 높여주는거다. 올림

Math.floor(1.01) =>1
Math.floor(9.99) => 9
내림

[1,2,3,4,5] 이렇게 생긴 array가 있을 때, Array.length를 사용하면 Array의 길이를 반환해준다.
>

<
1. 개요
background img를 가져와서 붙이긴 했지만, 여느 졸업 작품들 처럼 full-screen이면서 website 창의 크기에 맞춰 flexible 하는 방법이 궁금해졌습니다.

2. 과정
일단 background.js 에서 수정할 방법을 찾다가 안될 것 같아 css에서 다루기게 맞다고 생각함.
다만, background.js에서 createElement로 html에 새로만든 img라는 것이 class인지 id인지 확정되지 않아서인지 '.img', '#img'로도 style변경이 안됨.

3. 해결방법
여러 가지로 찾던 중 단순히 img를 css로 변경할 것이 아니라 html body자체를 변경해주는 것이 맞는걸 찾음.
공부하는 사람 중에 저처럼 img를 full-screen, non-fixed로 하고싶으신 분들은 아래 코드를 css에 작성해보세요~
적어도 저는 해결했습니다~
body{
background-position: center center;
background-size: cover;
background-repeat: no-repeat;
background-attachment: fixed;
}
>
<

1. createElement() : 태그를 생성
2. appendChild : 부모노드에 자식노드 추가


JS에서 이미지를 만들어서 html에게 추가하기
createElement 를 사용하자.

const images = ["0.JPG","1.JPG","2.JPG"]

const chosenImages = images[Math.floor(Math.random() * images.length)];

console.log(chosenImages);

const image = document.createElement("img");

image.src = `img/${chosenImages}`;
console.log(image);

**appendChild() => body에 추가하는 역할



const bgImage = document.createElement("img"); // 요소를 만들고

bgImage.src = `img/${chosenImages}`; //src에 스트링으로 생성해서

console.log(bgImage);

document.body.appendChild(bgImage); // 자식 추가
>

<
1. Math 객체 기능
Math.random() 0부터 1사이 무작위의 값을 반환해줌
Math.floor() 내림
Math.ceil() 올림
Math.round() 반올림

2. JS에서 html 요소를 생성
createElement(" ")
예를 들어,
document.createElement("img")일 경우 html 내에 img 태그를 생성

appendChild()
// 함수 안의 경로에 정의한 값을 가장 뒤에서 기입함
prependChild()
// 반대로 앞에서 기입
>

<
1. html
1) Todo-list 를 만들기를 원하니 html 에 form 태그로 구조를 만들어 준다. 나중에 JavaScript에서 만지기 쉽게 id는 todo-form으로 설정
2) form 자체는 submit이라는 기본 기능을 내장하는 하나의 묶음 밖에 되지 않는다. 
우리는 이용자가 todo-list 에 무언가 기입하는 것을 원하기 때문에 form 태그 안에 input 태그를 넣어 'text'를 타이핑할 수 있는 기능을 추가한다.
3) 그 밑에 ul 태그를 생성하여 todo-list에 작성 된 text가 저장 및 나열될 수 있게 한다.

2. JavaScript
1) 앞에 html에서 만든 구조 3가지 ('todo-form', 'todo-form 안의 input', 'todo-list') 에 접속하기 위해 항상 길게 타이핑하는 것은 비효율적이므로 단축을 위해 각각 변수로 설정한다.
2) 이전 greeting 강의에서 form 태그에서의 event는 submit를 발생시키고, 브라우저는 기본값으로 설정되어 있는 새로고침을 하게 된다. 우리는 todo-list를 작성한다고 새로고침 되는 것을 원치 않기 때문에
(todo-list를 1,000번 작성한다고 가정한다면 불필요한 새로고침이 1,000번 발생하고 1,000번의 랜덤한 이미지가 로드될 것이다. -> 데이터적으로 비효율적, 시각적으로 불편)
event.preventDefault() 로 기본값을 없애준다.
3) text 상자 안에 글을 작성하고 enter를 눌렀을 때 그 글이 초기화 되게 만들기 위해 toDoInput.value = ""; 을 통해 value를 빈 텍스트로 한다.
4) text 상자를 비게 하는 것은 좋은데 그 전에 이용자가 입력한 텍스트를 저장해야 나중에 ul태그 안에 사용할 수 있기 때문에 toDoInput.value = ""; 로 기입한 텍스트가 사라지기 이전에
const newTodo = toDoInput.value; 를 정의하여 기입한 텍스트가 newTodo라는 값에 저장되게 한다.
5) 앞의 세 가지 동작(기본값방지, 텍스트 저장, text상자비우기)는 한번에 이루어지는 세트이기때문에 효율성 및 편의를 위해 함수로 묶어준다.
function handleTodoSubmit() {
event.preventDefault();
const newTodo = toDoInput.value;
toDoInput.value = "";
}
6) todo-form 안에서 submit이 발생하는 특정 상황에서 함수handleTodoSubmmit을 실행 시키기 위해
toDoform.addEventListner("submit", handleTodoSubmit); 을 기입한다.
(함수 handleTodoSubmit이 항상 실행되고 있는 상태라면 text 창은 항상 비어있는 상태 일 것이기 때문에)
>

<

자바스크립트로 HTML태그를 생성할때 appendChild를 사용하시는데 append라는 것도 있길래 사용해보니 똑같이 동작을 했습니다. 
둘의 차이를 검색해봤는데 제 수준에는 조금 어려운 용어들이 나와서 이해하기가 힘든데 혹시 간단하고 쉽게 설명해 주실 수 있나요?

append()가 추가할 수 있는 종류가 더 많아요. append()로는 문자열도 추가가 가능한데, appendChild()로는 객체만 추가할 수 있어요. :)
li.append("추가해주세요") → (가능)
li.appendChild("추가해주세요") → (불가능 - typeError)

그리고 console.log로 두 개를 찍어보면 append()하고 appendChild()가 다르게 나와요!

>

<

< JS 입문자의 시점으로 본 # 7.1 >

피드백 언제나 환영입니다!!! :)

0. 이전 영상에서 우린 hadle.ToDoSubmit() 함수를 만들어
1) event.preventDefault(); // 새로고침을 막고
2) const newTodo = toDoInput.value; // submit하는 텍스트를 저장하고
3) toDoInput.value = ""; // 텍스트상자 안의 텍스트를 초기화시켰다.

이제 우린 방금 전 입력한 텍스트가 페이지에서 보여지는 것을 원하기 때문에 그에 맞는 코드를 작성할 것이다.

1. html 돌아보기
우린 이미 html에 todo-list라는 id를 가진 ul태그를 작성해 놓았고, 새로운 텍스트가 입력 될 때마다 그 안에 li 태그를 생성하여 나열하고 싶다. 이것을 JS에서 관여할 수 있도록 코드를 짜는 것이 필요하다.

2. JavaScript - todo list를 웹페이지에서 시각화하기
1) const li = document.createElement("li"); // li를 입력했을 때 html에서 li태그를 생성하게 명령한다.
2) const span = document.createElement("span"); // span이 정확히 왜 필요한지는 아직 잘 모르겠지만, 니꼬의 말에서 유추해보면 나중에 리스트 삭제 시 필요한가보다.
 아무튼 span이라는 const가 html 내에서 span태그를 만들게끔 한다.
3) li.appendChild(span); // li 태그 안에 자식을 span 태그로 하게끔 한다. 아직 span을 굳이 왜 만드는지는 정확히 이해 x


4) span.innerText = newTodo; // span이라는 태그 안의 텍스트가 앞에서 설정한 new Todo라는 객체가 되도록 한다. newTodo는 텍스트에 입력한 value값
ex) 텍스트 상자 안에 "안녕하세요"라고 입력하면 newTodo는 "안녕하세요"이므로 span안의 텍스트는 "안녕하세요"가 될 것이다.
5) toDoList.appendChild(li); // html의 ul 태그 안에 li 를 속하게 한다. (span을 li에 속하게 한 것과 동일)

3. 함수 piantTodo(newTodo)를 함수 handleTodoSubmit()에 추가
우리가 텍스트를 기입하고 submit 할 때마다 원하던 기능들을 실행시키기 위해 위에서 만든 함수 paintTodo(nweTodo)를 함수 handleTodoSubmit()에 추가한다.
기존 함수 handleToDoSubmit()가 텍스트 상자 안의 텍스트를 초기화하는 기능까지만 했다면, 
paintToDo(newTodo)추가 후에는 제출한 텍스트를 매번 html의 ul안에서 li태그와 그 안에 속하는 span 태그를 만들고 span에 텍스트로 남겨 웹 화면에서 보일 수 있는 것 까지 되게 한다.

4. 하지만 우리가 만든 todo list 는 아직 삭제를 하지 못하고, 새로고침시 초기화 되어 화면의 todo list가 날라가 버린다. 다음 영상에서는 니꼬가 이 부분에 대해 알려줄 것 같다. 
아무래도 이전에 배웠던 조건문 if를 이용한 tag 삭제 or 생성 그리고 생성된 span value를 localStorage에 저장 하는 방식으로 진행하지 않을까 싶다.

>

<
const todoForm = document.getElementById("todo-form");
const todoForm = document.querySelector("#todo-form");

이거 두 가지의 차이가 있나요 ????

getElementById는 리턴값이 querySelector와 같지만, getElementByClassName이나 TagName은 배열 형식으로 반환되서 todoForm[0] 이런식으로 사용해야 한다는거만 주의하면 될거같아요
>

https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/function

함수 선언식으로 표현된 함수는 자동으로 위로 끌어올려진다고 합니다!

<

니꼬쌤 잘 듣고 있습니다 !
이번수업에서 궁금한게 생겼는데요
const 는 재 선언 될수 없다고 했는데 paintTodo 함수 안의 const li 와 deleteTodo 안의 const li 가 같은이름으로 다르게 사용되고 있는데 왜 가능한가요 ?


'지역변수'에 대한 개념이 부족하셔서 하시는 질문 같은데,
우선 '지역변수'는 한 지역 내에서만 사용할 수 있는 변수인데,
여기서 지역은 중괄호 '{ }'에 의해 만들어지는 영역을 말합니다.
function은 중괄호 '{ }'로 구분을 하죠. 따라서 하나의 지역으로 정의를 내릴 수 있으며 한 지역 내에 정의된 변수는 그 지역에서만 정의됩니다.
다시 말해, 함수 paintTodo의 중괄호'{}'(지역) 안에 생성된 변수 li는 paintTodo안에서만 정의되기 때문에 다른 함수(지역)인 deleteTodo에서 다시 변수 li로 정의 할 수 있게 됩니다.
그래서 니코 쌤이 하신 말씀처럼 function(함수)가 실행될때 variable이 정의되고 function이 끝이 날때 없어지는 겁니다.
개인적으로 지역변수 개념은 저도 이해가 안되어서 한참 찾아보고 이해를 해서 추가 설명을 했네요.
c언어 기본으로 설명을 했는데 찾아보니 자바스크립트는 조금 다르네요.
함수 레벨 스코프(function-level scope)에서만 가능하고
ECMAScript 6에서 도입된 let keyword를 사용하면 블록 레벨 스코프가 가능하네요.

>

<
function deleteTodo() {
const li = this.parentElement
li.remove()
}

문제 해결하셨을 지는 모르겠지만 늦게나마 적어봅니다
input 작성 뒤 요소를 확인해보면

li
span>allalalal (button)


형식으로 생성이 됩니다.
버튼을 paintTodo 안에
... 중략
const button = document.createElement("button");
button.innerText = "❌";
button.addEventListener("click", deleteTodo);
... 생략
이런 식으로 구현을 했죠?
순서를 보면 button을 만들었고 버튼 이벤트를 클릭 시 deleteTodo라는 함수를 쓰게 될 건데
그 함수는
function deleteTodo() {
const li = this.parentElement
li.remove()
} 로 구현했습니다.

this 키워드는 어느 언어에서든 자기 자신을 뜻합니다.
this 키워드는 어디서 읽혀질까요?
``` button.addEventListener("click", deleteTodo); ``` 에서겠죠?
간단하게 이 this는 버튼 클릭 이벤트 시 그 이벤트가 일어난 버튼 자신을 얘기하는 겁니다
이 button의 부모는 무슨 태그일까요? 바로 li 태그입니다.
>

<

event.target.parentElement 로 안하고
function deleteTodo() {
toDoList.removeChild(li);
li.removeChild(removeBtn);
}
를 painTodo함수에 넣었더니 똑같이 작동되네요!

>

<
< JavaScript 입문자가 바라본 #7.2 >

0. #7.1 에서 우리는 기입한 텍스트를 화면에서 보이게 하는 코드까지 작성해보았다! 이제 그 텍스트를 내가 원할 때 지울 수 있게끔 니꼬를 따라가보자

1. JS에서 html 내부에 button 태그 만들기
1) const button = document.createElement("button"); // html에 button 태그를 생성할 수 있도록 button이라는 객체 정의
2) button.innerText = "❌"; // 사용자가 버튼을 누르면 텍스트가 삭제되는 기능이 있다는 것을 인식시키기 위해 버튼 내부 텍스트를 "❌"로 정의 (윈도우 기준: window 키 + . )

3) button.addEventListener("click", deleteToDo); // 버튼에서 이벤트가 발생했을 때 삭제 기능을 담당하는 함수가 실행되도록 한다. 여기에선 "click"이 발생 시, deleteToDo함수가 실생되도록 함

2. 삭제 기능을 담당하는 함수 생성
1) const li = event.target.parentElement; // 이벤트가 발생했들때.해당객체를지정하여.그것의부모태그를지정;
2) li.remove(); // 위에서 지정된 것을 삭제;

3. 정리하면
1) button.addEventListener("click", deleteToDo); 에서 클릭이 발생하면 deleteToDo함수가 실행된다.
2) function deleteToDo(event) { const li = event.target.parentElement; li.remove(); }

4. 성공적으로 삭제시키고 내적기쁨의댄스 🤹‍♀️🤹‍♂️🤸‍♂️🤸‍♀️
ㅋㅋㅋㅋ
>

<
function deleteToDo(event) {
const li = event.target.parentElement;
li.remove();
}


1. button을 click하면,
button.addEventListener("click", deleteToDo);
에 의해 deleteToDo함수 실행. 이때 'click'이라는 event가 deleteToDo함수의 매개변수(parameter)로 들어감.

2. event는 target(= event를 발생시킨 장본인.)을 줌. (여기서는 button)

3. parentElement로 target의 부모(= li)에 접근.
4. li를 제거.
>

<
const button = document.createElement("button");

button.innerText = "Delete";

li.appendChild(button);

button.addEventListener("click", deleteToDo);

}


function deleteToDo(event){ // event에는 click에 대한 정보가 들어있음.

const li = event.target.parentElement;

// event객체안에 target이라는 메서드 안에보면 parentElement속성이 다름.

// 그걸로 여러개의 li를 구분할 수 있을 것임!!

// event.target == this임 그래서 this.parentElement해도 무방함


li remove();

}
>

<

const deleteToDo = e => {
const li = e.target.parentElement;
li.remove();
}


const paintToDo = newToDo => {
const li = document.createElement("li");
li.innerHTML = `
span${newToDo}/span
button class="deleteBtn">❌/button
`
toDoList.appendChild(li);
const button = document.querySelector(".deleteBtn")
button.addEventListener("click", deleteToDo)
}

이런 식으로 코드를 짤 경우 왜 e.target이 왜 2번째 button부터는 작동하지 않을까요 ㅠㅠ
궁금합니다 !!

태그가 등록하려고 하니 짤려서 span하고 button으로 넣었습니다

---------

button클래스가 deletebtn인 녀석들이 많이 생기지만 querySeletor는 항상 처음녀석 밖에 찾지 못하니까 그런거 같습니다.

>